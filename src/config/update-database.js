const { Pool } = require('pg');
const dotenv = require('dotenv');

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env' });

// Configura√ß√£o do PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

async function updateDatabase() {
  try {
    console.log('üîÑ Atualizando estrutura do banco de dados...');
    
    // Tornar dados pessoais opcionais (incluindo CPF)
    const alterColumns = [
      'ALTER TABLE users ALTER COLUMN nome DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN email DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN cpf DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN telefone DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN cep DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN logradouro DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN numero DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN bairro DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN cidade DROP NOT NULL;',
      'ALTER TABLE users ALTER COLUMN estado DROP NOT NULL;',
    ];
    
    // Adicionar colunas de dados banc√°rios se n√£o existirem
    const addBankingColumns = [
      'ALTER TABLE users ADD COLUMN IF NOT EXISTS bank_name VARCHAR(255);',
      'ALTER TABLE users ADD COLUMN IF NOT EXISTS account_type VARCHAR(50);',
      'ALTER TABLE users ADD COLUMN IF NOT EXISTS agency VARCHAR(20);',
      'ALTER TABLE users ADD COLUMN IF NOT EXISTS account VARCHAR(20);',
    ];
    
    // Executar altera√ß√µes para tornar campos pessoais opcionais
    console.log('üìù Tornando campos pessoais opcionais (incluindo CPF)...');
    for (const query of alterColumns) {
      try {
        await pool.query(query);
        console.log(`‚úÖ Executado: ${query}`);
      } catch (error) {
        console.log(`‚ÑπÔ∏è J√° executado ou n√£o necess√°rio: ${query}`);
      }
    }
    
    // Adicionar colunas banc√°rias se n√£o existirem
    console.log('üè¶ Adicionando colunas banc√°rias...');
    for (const query of addBankingColumns) {
      try {
        await pool.query(query);
        console.log(`‚úÖ Executado: ${query}`);
      } catch (error) {
        console.log(`‚ÑπÔ∏è J√° executado: ${query}`);
      }
    }
    
    // Verificar estrutura atual da tabela
    console.log('üìä Verificando estrutura atual da tabela users...');
    const structureQuery = `
      SELECT 
        column_name, 
        data_type, 
        is_nullable,
        column_default
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      ORDER BY ordinal_position;
    `;
    
    const structureResult = await pool.query(structureQuery);
    console.log('Estrutura atual da tabela users:');
    structureResult.rows.forEach(row => {
      console.log(`- ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
    });
    
    console.log('üéâ Atualiza√ß√£o do banco de dados conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar banco de dados:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

// Executar a atualiza√ß√£o
updateDatabase().catch(console.error);
